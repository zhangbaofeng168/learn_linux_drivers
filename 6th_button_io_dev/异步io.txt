/**驱动程序**/
1.中断时，发送消息给应用程序
kill_fasync(&button_async, SIGIO, POLL_IN);

2.
static struct fasync_struct *button_async;//声明
static const struct file_operations keydev_fops = {

	.fasync	        =  button_fasync,
};

static int button_fasync (int fd, struct file *filp, int on)
{
	printk("driver: button_drv_fasync\n");
	return fasync_helper(fd, filp, on, &button_async);//填写button_async
}
/**应用程序**/
1.信号处理函数
void my_signal_fun(int signum)
{
	unsigned char key_val;
	read(fd, &key_val, 1);
	printf("key_val: 0x%x\n", key_val);
}

2.signal(SIGIO, my_signal_fun);

3.
	/*告诉驱动，发给谁
	
	设置文件fd异步io所有权*/
	fcntl(fd, F_SETOWN, getpid());
	
	/**改变fasync标志，最终会调用驱动函数的button_fasync,
	初始化,释放button_async结构体**/
	Oflags = fcntl(fd, F_GETFL); //获取文件fd状态标志
	fcntl(fd, F_SETFL, Oflags | FASYNC);//改变文件fd状态标志